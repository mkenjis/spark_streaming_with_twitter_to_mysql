
----------------------

start-master.sh   # start the spark cluster master 
start-slaves.sh   # start the spark cluster slaves

# download the related twitter jars
spark-shell --packages org.apache.bahir:spark-streaming-twitter_2.11:2.3.2

# copy the related twitter jars to $SPARK_HOME/jars
cp .ivy2/jars/* $SPARK_HOME/jars

# restart the spark-shell using the spark standalone cluster
spark-shell --master spark://spkm:7077 --jars SqlProducer/target/scala-2.11/sql-producer_2.11-1.0.0.jar,/usr/local/spark-2.3.2/jars/mysql-connector-java.jar

----------------------

enable mysql-server to enable remote connections by

commenting out the entry using the # character in /etc/mysql/mysql.conf.d/mysqld.cnf :

# bind-address = 127.0.0.1 

----------------------

import org.apache.spark._
import org.apache.spark.streaming._
import org.apache.spark.streaming.twitter._
import twitter4j.Status
import twitter4j.auth.OAuthAuthorization
import twitter4j.conf.ConfigurationBuilder

val builder = new ConfigurationBuilder()
builder.setDebugEnabled(true)
builder.setOAuthConsumerKey("PCx45utcQw1DjUtz7wDh2LSCY")
builder.setOAuthConsumerSecret("BihPBN11zcRuxNQXRxT5bBLlHhPCP2TTld7soqkv6R2v0koNh6")
builder.setOAuthAccessToken("39749612-mkEB2qh7ao9BgiffFXwuGfpyiulrtE031wO5oBX2y")
builder.setOAuthAccessTokenSecret("Z1jiSVMMExJ3XWqWvYChnOTHihm4jRNx35JhObW7xvnpg")

val auth = new OAuthAuthorization(builder.build)

val filters = Array("trump", "donald")

val ssc = new StreamingContext(sc,Seconds(10))
val twitterStream = TwitterUtils.createStream(ssc, Some(auth), filters )

val tweets = twitterStream.filter(tweet => tweet.getLang.equals("en") || tweet.getLang.equals("")).map(_.getText()).map(_.replaceAll("/[^A-Za-z0-9 ]/", "")).map(_.replaceAll("/", "")).map(_.replaceAll("RT.+?(?=\\s)\\s", "")).map(_.replaceAll("https([^\\s]+).*", "")).map(_.length().toString)

import sqlProducerWrapper.SqlProducerWrapper

tweets.foreachRDD( rdd  => {
  rdd.foreachPartition( iter  => {
    SqlProducerWrapper.url = "jdbc:mysql://spkm:3306/mydata?useSSL=false"
    SqlProducerWrapper.user = "mydata"
    SqlProducerWrapper.password = "admsys123"
    val producer = SqlProducerWrapper.instance
    iter.foreach( vvalue =>
       producer.send("key", vvalue) )
       producer.execBatch("key")
    })
})

sc.setCheckpointDir("hdfs://spkm:9000/checkpoint")

ssc.start()

---------------

tweets.foreachRDD( rdd  => {
  rdd.foreachPartition( iter  => {
    SqlProducerWrapper.url = "jdbc:oracle:thin:@oracle18.intranet:1521:xe"
    SqlProducerWrapper.user = "teste"
    SqlProducerWrapper.password = "teste123"
    val producer = SqlProducerWrapper.instance
    iter.foreach( vvalue =>
       producer.send("key", vvalue) )
       producer.execBatch("key")
    })
})